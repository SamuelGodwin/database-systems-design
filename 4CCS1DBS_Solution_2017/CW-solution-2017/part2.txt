################################################################################
###
## schema.sql
#
schema.sql exists: True
--------------------------------------------------------------------------------
-- Part 2.1 schema.sql
--
-- Submitted by: Coursework Solution
-- 
-- edit your schema here ---------------

CREATE TABLE Customer (
    email VARCHAR(255) PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    dob DATE NOT NULL,
    address VARCHAR(255) NOT NULL,
    burrito_club_no INT UNIQUE AUTO_INCREMENT
);

CREATE TABLE FoodTruck (
    vehicle_id VARCHAR(64) PRIMARY KEY,
    date_in_service DATE NOT NULL 
);


CREATE TABLE Market (
    post_code VARCHAR(16) PRIMARY KEY,
    name VARCHAR(255),
    location VARCHAR(255),
    days_active VARCHAR(10)
    -- Days of the Week String: 
    -- (M)onday, (T)uesday, (W)ednesday, Thu(R)sday, (F)riday, (S)aturday, S(U)nday
    -- i.e. weekdays "MTWRF"
);


CREATE TABLE Appears (
    foodtruck_id VARCHAR(64) NOT NULL, 
    market_post_code VARCHAR(16) NOT NULL,
    date_scheduled DATE NOT NULL,
    
    PRIMARY KEY(foodtruck_id, market_post_code, date_scheduled),
    FOREIGN KEY (foodtruck_id) REFERENCES FoodTruck(vehicle_id)
                ON DELETE RESTRICT ON UPDATE CASCADE,
    FOREIGN KEY (market_post_code) REFERENCES Market(post_code)
                ON DELETE RESTRICT ON UPDATE CASCADE
);


CREATE TABLE FoodTruckOrder (
    order_no INT PRIMARY KEY AUTO_INCREMENT,
    date_placed DATE NOT NULL,
    burrito_club_no INT, -- NOTE: CAN be NULL for anonymous orders
    food_truck_id VARCHAR(64) NOT NULL,
    market_post_code VARCHAR(16) NOT NULL,
    total_cost DECIMAL(6,2),

    FOREIGN KEY (burrito_club_no) REFERENCES Customer(burrito_club_no)
                ON DELETE SET NULL ON UPDATE CASCADE,
    FOREIGN KEY (food_truck_id) REFERENCES FoodTruck(vehicle_id)
                ON DELETE RESTRICT ON UPDATE CASCADE,
    FOREIGN KEY (market_post_code) REFERENCES Market(post_code)
                ON DELETE RESTRICT ON UPDATE CASCADE
);
-- NOTE: "Quantity" of items can be derived from the FoodTruckItems.
-- Total for the Order could be derived, but for efficiency sake,
-- will store it as a real attribute to take into account Free Burritos.


CREATE TABLE Burrito (
    burrito_id INT PRIMARY KEY,
    price DECIMAL(6,2) NOT NULL,
    description VARCHAR(25), -- Describe the Burrito
    size VARCHAR(10), -- "Mini", "Regular", "Grande"
    bean_type VARCHAR(25), -- CHECK DOMAIN "black", "red"
    filling VARCHAR(25)
);


CREATE TABLE Topping (
    topping_id INT PRIMARY KEY,
    price DECIMAL(6,2) NOT NULL,
    description VARCHAR(25) -- Describe the Topping
);


CREATE TABLE Drink (
    drink_id INT PRIMARY KEY,
    price DECIMAL(6,2) NOT NULL,
    description VARCHAR(25),
    size_ml INT,
    alcoholic BOOLEAN
);


CREATE TABLE Contains_Burrito (
    order_no INT NOT NULL,
    burrito_no INT UNSIGNED DEFAULT 1,
    burrito_id INT NOT NULL,

    PRIMARY KEY(order_no, burrito_id, burrito_no),
    FOREIGN KEY (order_no) REFERENCES FoodTruckOrder(order_no)
                ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (burrito_id) REFERENCES Burrito(burrito_id)
                ON DELETE CASCADE ON UPDATE CASCADE
);


CREATE TABLE Contains_Topping (
    order_no INT NOT NULL,
    burrito_no INT UNSIGNED DEFAULT 1,
    topping_id INT NOT NULL,

    PRIMARY KEY(order_no, burrito_no, topping_id),
    FOREIGN KEY (order_no) REFERENCES FoodTruckOrder(order_no)
                ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (topping_id) REFERENCES Topping(topping_id)
                ON DELETE CASCADE ON UPDATE CASCADE
);


CREATE TABLE Contains_Drink (
    order_no INT NOT NULL,
    drink_id INT NOT NULL,
    quantity INT UNSIGNED DEFAULT 1,
    PRIMARY KEY(order_no, drink_id),

    FOREIGN KEY (order_no) REFERENCES FoodTruckOrder(order_no)
                ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (drink_id) REFERENCES Drink(drink_id)
                ON DELETE CASCADE ON UPDATE CASCADE
);

-- "Number Of Burritos" is a dervied attribute 
-- that can be calculated from the Database.
CREATE VIEW BurritoClub AS
SELECT burrito_club_no, COUNT(*) as NumberOfBurritos 
FROM FoodTruckOrder NATURAL JOIN Contains_Burrito 
GROUP BY burrito_club_no 
HAVING burrito_club_no IS NOT NULL;


--------------------------------------------------------------------------------

RUNNING schema.sql
---
Warning: Using a password on the command line interface can be insecure.
--------------
CREATE TABLE Customer (
    email VARCHAR(255) PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    dob DATE NOT NULL,
    address VARCHAR(255) NOT NULL,
    burrito_club_no INT UNIQUE AUTO_INCREMENT
)
--------------

--------------
CREATE TABLE FoodTruck (
    vehicle_id VARCHAR(64) PRIMARY KEY,
    date_in_service DATE NOT NULL 
)
--------------

--------------
CREATE TABLE Market (
    post_code VARCHAR(16) PRIMARY KEY,
    name VARCHAR(255),
    location VARCHAR(255),
    days_active VARCHAR(10)
    
    
    
)
--------------

--------------
CREATE TABLE Appears (
    foodtruck_id VARCHAR(64) NOT NULL, 
    market_post_code VARCHAR(16) NOT NULL,
    date_scheduled DATE NOT NULL,
    
    PRIMARY KEY(foodtruck_id, market_post_code, date_scheduled),
    FOREIGN KEY (foodtruck_id) REFERENCES FoodTruck(vehicle_id)
                ON DELETE RESTRICT ON UPDATE CASCADE,
    FOREIGN KEY (market_post_code) REFERENCES Market(post_code)
                ON DELETE RESTRICT ON UPDATE CASCADE
)
--------------

--------------
CREATE TABLE FoodTruckOrder (
    order_no INT PRIMARY KEY AUTO_INCREMENT,
    date_placed DATE NOT NULL,
    burrito_club_no INT, 
    food_truck_id VARCHAR(64) NOT NULL,
    market_post_code VARCHAR(16) NOT NULL,
    total_cost DECIMAL(6,2),

    FOREIGN KEY (burrito_club_no) REFERENCES Customer(burrito_club_no)
                ON DELETE SET NULL ON UPDATE CASCADE,
    FOREIGN KEY (food_truck_id) REFERENCES FoodTruck(vehicle_id)
                ON DELETE RESTRICT ON UPDATE CASCADE,
    FOREIGN KEY (market_post_code) REFERENCES Market(post_code)
                ON DELETE RESTRICT ON UPDATE CASCADE
)
--------------

--------------
CREATE TABLE Burrito (
    burrito_id INT PRIMARY KEY,
    price DECIMAL(6,2) NOT NULL,
    description VARCHAR(25), 
    size VARCHAR(10), 
    bean_type VARCHAR(25), 
    filling VARCHAR(25)
)
--------------

--------------
CREATE TABLE Topping (
    topping_id INT PRIMARY KEY,
    price DECIMAL(6,2) NOT NULL,
    description VARCHAR(25) 
)
--------------

--------------
CREATE TABLE Drink (
    drink_id INT PRIMARY KEY,
    price DECIMAL(6,2) NOT NULL,
    description VARCHAR(25),
    size_ml INT,
    alcoholic BOOLEAN
)
--------------

--------------
CREATE TABLE Contains_Burrito (
    order_no INT NOT NULL,
    burrito_no INT UNSIGNED DEFAULT 1,
    burrito_id INT NOT NULL,

    PRIMARY KEY(order_no, burrito_id, burrito_no),
    FOREIGN KEY (order_no) REFERENCES FoodTruckOrder(order_no)
                ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (burrito_id) REFERENCES Burrito(burrito_id)
                ON DELETE CASCADE ON UPDATE CASCADE
)
--------------

--------------
CREATE TABLE Contains_Topping (
    order_no INT NOT NULL,
    burrito_no INT UNSIGNED DEFAULT 1,
    topping_id INT NOT NULL,

    PRIMARY KEY(order_no, burrito_no, topping_id),
    FOREIGN KEY (order_no) REFERENCES FoodTruckOrder(order_no)
                ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (topping_id) REFERENCES Topping(topping_id)
                ON DELETE CASCADE ON UPDATE CASCADE
)
--------------

--------------
CREATE TABLE Contains_Drink (
    order_no INT NOT NULL,
    drink_id INT NOT NULL,
    quantity INT UNSIGNED DEFAULT 1,
    PRIMARY KEY(order_no, drink_id),

    FOREIGN KEY (order_no) REFERENCES FoodTruckOrder(order_no)
                ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (drink_id) REFERENCES Drink(drink_id)
                ON DELETE CASCADE ON UPDATE CASCADE
)
--------------

--------------
CREATE VIEW BurritoClub AS
SELECT burrito_club_no, COUNT(*) as NumberOfBurritos 
FROM FoodTruckOrder NATURAL JOIN Contains_Burrito 
GROUP BY burrito_club_no 
HAVING burrito_club_no IS NOT NULL
--------------


---
###


################################################################################
###
## insert.sql
#
insert.sql exists: True
--------------------------------------------------------------------------------
-- Part 2.2 insert.sql
--
-- Submitted by: Coursework Solution
-- 
-- add your INSERT statements here

-- create 3 Markets
INSERT INTO Market VALUES 
  ("EC1R 4QL", "Exmouth Market", "Clerkenwell", "RF");
INSERT INTO Market VALUES 
  ("EC1Y", "Whitecross Street", "Shoreditch", "MTWRF");
INSERT INTO Market VALUES 
  ("E8 2NP", "Ridley Road", "Dalston", "MTWRFS");

-- create 2 Food Trucks
INSERT INTO FoodTruck VALUES ("FT123ABC", "2017-01-01");
INSERT INTO FoodTruck VALUES ("FT456DEF", "2017-02-01");

-- Schedule Food Trucks to Appear at Markets
-- "2017-05-29" -- Monday
INSERT INTO Appears VALUES ("FT123ABC", "EC1Y", "2017-05-29");
INSERT INTO Appears VALUES ("FT456DEF", "E8 2NP", "2017-05-29");
-- "2017-05-30" -- Tuesday
INSERT INTO Appears VALUES ("FT123ABC", "EC1Y", "2017-05-30");
INSERT INTO Appears VALUES ("FT456DEF", "E8 2NP", "2017-05-30");
-- "2017-05-31" -- Wednesday
INSERT INTO Appears VALUES ("FT123ABC", "EC1Y", "2017-05-31");
INSERT INTO Appears VALUES ("FT456DEF", "E8 2NP", "2017-05-31");
-- "2017-06-01" -- Thursday
INSERT INTO Appears VALUES ("FT123ABC", "EC1Y", "2017-06-01");
INSERT INTO Appears VALUES ("FT456DEF", "EC1R 4QL", "2017-06-01");
-- "2017-06-02" -- Friday
INSERT INTO Appears VALUES ("FT123ABC", "EC1Y", "2017-06-02");
INSERT INTO Appears VALUES ("FT456DEF", "EC1R 4QL", "2017-06-02");
-- "2017-06-03" -- Saturday
INSERT INTO Appears VALUES ("FT456DEF", "EC1R 4QL", "2017-06-03");

-- create some Customers
INSERT INTO Customer VALUES ("clooney@hollywood.com", "George Clooney", "1961-05-06", "8817 Lookout Mountain Ave., Los Angelos CA", 1);
INSERT INTO Customer VALUES ("rhianna@facebook.com", "Rihanna", "1988-02-20", "932 Rivas Canyon Road, Pacific Palisades CA", 2);
INSERT INTO Customer VALUES ("bling@hotline.com", "Drake", "1986-10-24", "5841 Round Meadow Rd, Hidden Hills, CA", 3);

-- create some Burritos
INSERT INTO Burrito VALUES (1, 2.22, "Mini Veggie (Red Bean)", "Mini", "red", "veggie");
INSERT INTO Burrito VALUES (2, 2.22, "Mini Veggie (Black Bean)", "Mini", "black", "veggie");
INSERT INTO Burrito VALUES (3, 3.33, "Regular Veggie (Red Bean)", "Regular", "red", "veggie");
INSERT INTO Burrito VALUES (4, 3.33, "Regular Veggie (Black Bean)", "Regular", "black", "veggie");
INSERT INTO Burrito VALUES (5, 6.66, "Grande Veggie (Red Bean)", "Grande", "red", "veggie");
INSERT INTO Burrito VALUES (6, 6.66, "Grande Veggie (Black Bean)", "Grande", "black", "veggie");

INSERT INTO Burrito VALUES (7, 2.22, "Mini Clucky (Red Bean)", "Mini", "red", "chicken");
INSERT INTO Burrito VALUES (8, 2.22, "Mini Clucky (Black Bean)", "Mini", "black", "chicken");
INSERT INTO Burrito VALUES (9, 3.33, "Regular Clucky (Red Bean)", "Regular", "red", "chicken");
INSERT INTO Burrito VALUES (10, 3.33, "Regular Clucky (Black Bean)", "Regular", "black", "chicken");
INSERT INTO Burrito VALUES (11, 6.66, "Grande Clucky (Red Bean)", "Grande", "red", "chicken");
INSERT INTO Burrito VALUES (12, 6.66, "Grande Clucky (Black Bean)", "Grande", "black", "chicken");

INSERT INTO Burrito VALUES (13, 2.22, "Mini Moo (Red Bean)", "Mini", "red", "beef");
INSERT INTO Burrito VALUES (14, 2.22, "Mini Moo (Black Bean)", "Mini", "black", "beef");
INSERT INTO Burrito VALUES (15, 3.33, "Regular Moo (Red Bean)", "Regular", "red", "beef");
INSERT INTO Burrito VALUES (16, 3.33, "Regular Moo (Black Bean)", "Regular", "black", "beef");
INSERT INTO Burrito VALUES (17, 6.66, "Grande Moo (Red Bean)", "Grande", "red", "beef");
INSERT INTO Burrito VALUES (18, 6.66, "Grande Moo (Black Bean)", "Grande", "black", "beef");

-- create Toppings
INSERT INTO Topping VALUES (1, 0.00, "Lettuce");
INSERT INTO Topping VALUES (2, 0.00, "Tomato");
INSERT INTO Topping VALUES (3, 0.00, "Mild Salsa");
INSERT INTO Topping VALUES (4, 0.00, "Hot Salsa");
INSERT INTO Topping VALUES (5, 0.75, "Guacamole");

-- create some Drinks
INSERT INTO Drink VALUES (1, 1.00, "Cola", 330, False);
INSERT INTO Drink VALUES (2, 2.50, "Lemonade", 500, False);
INSERT INTO Drink VALUES (3, 3.00, "Pint of Bitter", 568, True);
INSERT INTO Drink VALUES (4, 5.00, "American Beer", 473, True);

--
-- Order some Burritos
--

-- 3 orders for Customer 1 (Clooney)
INSERT INTO FoodTruckOrder(order_no, burrito_club_no, food_truck_id, market_post_code, date_placed) 
VALUES (1, 1, "FT123ABC", "EC1Y", "2017-05-29");
-- Burrito 1
INSERT INTO Contains_Burrito VALUES (1, 1, 15);
INSERT INTO Contains_Topping VALUES (1, 1, 5);
-- Burrito 2
INSERT INTO Contains_Burrito VALUES (1, 2, 5);
INSERT INTO Contains_Topping VALUES (1, 2, 4);
-- Burrito 3
INSERT INTO Contains_Burrito VALUES (1, 3, 17);
INSERT INTO Contains_Topping VALUES (1, 3, 2);
INSERT INTO Contains_Topping VALUES (1, 3, 3);
-- Drink
INSERT INTO Contains_Drink VALUES (1, 1, 1);


INSERT INTO FoodTruckOrder(order_no, burrito_club_no, food_truck_id, market_post_code, date_placed) 
VALUES (2, 1, "FT123ABC", "EC1Y", "2017-05-31");
-- Burrito 1
INSERT INTO Contains_Burrito VALUES (2, 1, 2);
INSERT INTO Contains_Topping VALUES (2, 1, 5);
-- Burrito 2 
INSERT INTO Contains_Burrito VALUES (2, 2, 3);
INSERT INTO Contains_Topping VALUES (2, 2, 2);
INSERT INTO Contains_Topping VALUES (2, 2, 3);
INSERT INTO Contains_Topping VALUES (2, 2, 4);
INSERT INTO Contains_Topping VALUES (2, 2, 5);
-- Burrito 3
INSERT INTO Contains_Burrito VALUES (2, 3, 4);
INSERT INTO Contains_Topping VALUES (2, 3, 3);
INSERT INTO Contains_Topping VALUES (2, 3, 4);
-- Burrito 4
INSERT INTO Contains_Burrito VALUES (2, 4, 15);
INSERT INTO Contains_Topping VALUES (2, 4, 1);
INSERT INTO Contains_Topping VALUES (2, 4, 2);
INSERT INTO Contains_Topping VALUES (2, 4, 3);
-- Burrito 5 
INSERT INTO Contains_Burrito VALUES (2, 5, 2);
INSERT INTO Contains_Topping VALUES (2, 5, 1);
INSERT INTO Contains_Topping VALUES (2, 5, 2);
INSERT INTO Contains_Topping VALUES (2, 5, 3);
INSERT INTO Contains_Topping VALUES (2, 5, 4);
INSERT INTO Contains_Topping VALUES (2, 5, 5);
-- Drink
INSERT INTO Contains_Drink VALUES (2, 2, 2);


INSERT INTO FoodTruckOrder(order_no, burrito_club_no, food_truck_id, market_post_code, date_placed) 
VALUES (3, 1, "FT456DEF", "EC1R 4QL", "2017-06-03");
-- Burrito 1
INSERT INTO Contains_Burrito VALUES (3, 1, 6);
INSERT INTO Contains_Topping VALUES (3, 1, 4);
-- Burrito 2
INSERT INTO Contains_Burrito VALUES (3, 2, 3);
INSERT INTO Contains_Topping VALUES (3, 2, 2);
INSERT INTO Contains_Topping VALUES (3, 2, 3);
-- Burrito 3 (11th Burrito - should be *FREE*)
INSERT INTO Contains_Burrito VALUES (3, 3, 13);
INSERT INTO Contains_Topping VALUES (3, 3, 3);
INSERT INTO Contains_Topping VALUES (3, 3, 4);
INSERT INTO Contains_Topping VALUES (3, 3, 5);
-- Drink
INSERT INTO Contains_Drink VALUES (3, 3, 1);


-- 3 orders for Customer 2 (Rihanna)
INSERT INTO FoodTruckOrder(order_no, burrito_club_no, food_truck_id, market_post_code, date_placed) 
VALUES (4, 2, "FT456DEF", "E8 2NP", "2017-05-29");
-- Burrito 1
INSERT INTO Contains_Burrito VALUES (4, 1, 14);
INSERT INTO Contains_Topping VALUES (4, 1, 1);
INSERT INTO Contains_Topping VALUES (4, 1, 5);
-- Burrito 2
INSERT INTO Contains_Burrito VALUES (4, 2, 12);
INSERT INTO Contains_Topping VALUES (4, 2, 1);
INSERT INTO Contains_Topping VALUES (4, 2, 2);
INSERT INTO Contains_Topping VALUES (4, 2, 3);
INSERT INTO Contains_Topping VALUES (4, 2, 4);
-- Drink
INSERT INTO Contains_Drink VALUES (4, 4, 2);
INSERT INTO Contains_Drink VALUES (4, 3, 1);


INSERT INTO FoodTruckOrder(order_no, burrito_club_no, food_truck_id, market_post_code, date_placed) 
VALUES (5, 2, "FT456DEF", "EC1R 4QL", "2017-06-01");
-- Burrito 1
INSERT INTO Contains_Burrito VALUES (5, 1, 11);
INSERT INTO Contains_Topping VALUES (5, 1, 1);
INSERT INTO Contains_Topping VALUES (5, 1, 2);
INSERT INTO Contains_Topping VALUES (5, 1, 3);


INSERT INTO FoodTruckOrder(order_no, burrito_club_no, food_truck_id, market_post_code, date_placed) 
VALUES (6, 2, "FT456DEF", "EC1R 4QL", "2017-06-02");
-- Burrito 1
INSERT INTO Contains_Burrito VALUES (6, 1, 7);
-- Burrito 2
INSERT INTO Contains_Burrito VALUES (6, 2, 1);
INSERT INTO Contains_Topping VALUES (6, 2, 3);
-- Drink
INSERT INTO Contains_Drink VALUES (6, 1, 1);

-- 3 orders for Customer 3 (Drake)
INSERT INTO FoodTruckOrder(order_no, burrito_club_no, food_truck_id, market_post_code, date_placed) 
VALUES (7, 3, "FT123ABC", "EC1Y", "2017-05-31");
-- Burrito 1
INSERT INTO Contains_Burrito VALUES (7, 1, 9);
INSERT INTO Contains_Topping VALUES (7, 1, 2);
INSERT INTO Contains_Topping VALUES (7, 1, 5);
-- Drink
INSERT INTO Contains_Drink VALUES (7, 2, 1);


INSERT INTO FoodTruckOrder(order_no, burrito_club_no, food_truck_id, market_post_code, date_placed) 
VALUES (8, 3, "FT123ABC", "EC1Y", "2017-06-02");
-- Burrito 1
INSERT INTO Contains_Burrito VALUES (8, 1, 10);
INSERT INTO Contains_Topping VALUES (8, 1, 1);
INSERT INTO Contains_Topping VALUES (8, 1, 2);
INSERT INTO Contains_Topping VALUES (8, 1, 3);
INSERT INTO Contains_Topping VALUES (8, 1, 4);
INSERT INTO Contains_Topping VALUES (8, 1, 5);


INSERT INTO FoodTruckOrder(order_no, burrito_club_no, food_truck_id, market_post_code, date_placed) 
VALUES (9, 3, "FT456DEF", "EC1R 4QL", "2017-06-03");
-- Burrito 1VALUES 
INSERT INTO Contains_Burrito VALUES (9, 1, 8);
INSERT INTO Contains_Topping VALUES (9, 1, 2);
INSERT INTO Contains_Topping VALUES (9, 1, 3);
INSERT INTO Contains_Topping VALUES (9, 1, 5);
-- Drink
INSERT INTO Contains_Drink VALUES (9, 1, 1);


-- 3 anonymous Customers
INSERT INTO FoodTruckOrder(order_no, burrito_club_no, food_truck_id, market_post_code, date_placed) 
VALUES (10, NULL, "FT123ABC", "EC1Y", "2017-05-29");
-- Burrito 1
INSERT INTO Contains_Burrito VALUES (10, 1, 16);
INSERT INTO Contains_Topping VALUES (10, 1, 4);
INSERT INTO Contains_Topping VALUES (10, 1, 5);


INSERT INTO FoodTruckOrder(order_no, burrito_club_no, food_truck_id, market_post_code, date_placed) 
VALUES (11, NULL, "FT456DEF", "E8 2NP", "2017-05-31");
-- Burrito 1
INSERT INTO Contains_Burrito VALUES (11, 1, 17);
INSERT INTO Contains_Topping VALUES (11, 1, 1);
INSERT INTO Contains_Topping VALUES (11, 1, 3);
INSERT INTO Contains_Topping VALUES (11, 1, 4);
INSERT INTO Contains_Topping VALUES (11, 1, 5);
-- Drink
INSERT INTO Contains_Drink VALUES (11, 4, 1);


INSERT INTO FoodTruckOrder(order_no, burrito_club_no, food_truck_id, market_post_code, date_placed) 
VALUES (12, NULL, "FT456DEF", "EC1R 4QL", "2017-06-02");
-- Burrito 1
INSERT INTO Contains_Burrito VALUES (12, 1, 18);
INSERT INTO Contains_Topping VALUES (12, 1, 1);
INSERT INTO Contains_Topping VALUES (12, 1, 2);
-- Burrito 1
INSERT INTO Contains_Burrito VALUES (12, 2, 1);
INSERT INTO Contains_Topping VALUES (12, 2, 1);
INSERT INTO Contains_Topping VALUES (12, 2, 3);
INSERT INTO Contains_Topping VALUES (12, 2, 5);
-- Drink
INSERT INTO Contains_Drink VALUES (12, 2, 2);

-- Calculate the total cost for each Order
UPDATE FoodTruckOrder, 
(SELECT order_no, SUM(price) as total_cost
 FROM ( (SELECT order_no, price
         FROM Contains_Burrito NATURAL JOIN Burrito
         WHERE NOT(order_no = 3 AND burrito_no = 3)) -- omits the 1 FREE BURRITO
        UNION
        (SELECT order_no, price
         FROM Contains_Topping NATURAL JOIN Topping 
         WHERE NOT(order_no = 3 AND burrito_no = 3)) -- omits the 1 FREE BURRITO
        UNION
        (SELECT order_no, (price * quantity) as price
         FROM Contains_Drink NATURAL JOIN Drink) ) as A
 GROUP BY order_no) as T
SET FoodTruckOrder.total_cost = T.total_cost
WHERE FoodTruckOrder.order_no = T.order_no;
--------------------------------------------------------------------------------

RUNNING insert.sql
---
Warning: Using a password on the command line interface can be insecure.
--------------
INSERT INTO Market VALUES 
  ("EC1R 4QL", "Exmouth Market", "Clerkenwell", "RF")
--------------

--------------
INSERT INTO Market VALUES 
  ("EC1Y", "Whitecross Street", "Shoreditch", "MTWRF")
--------------

--------------
INSERT INTO Market VALUES 
  ("E8 2NP", "Ridley Road", "Dalston", "MTWRFS")
--------------

--------------
INSERT INTO FoodTruck VALUES ("FT123ABC", "2017-01-01")
--------------

--------------
INSERT INTO FoodTruck VALUES ("FT456DEF", "2017-02-01")
--------------

--------------
INSERT INTO Appears VALUES ("FT123ABC", "EC1Y", "2017-05-29")
--------------

--------------
INSERT INTO Appears VALUES ("FT456DEF", "E8 2NP", "2017-05-29")
--------------

--------------
INSERT INTO Appears VALUES ("FT123ABC", "EC1Y", "2017-05-30")
--------------

--------------
INSERT INTO Appears VALUES ("FT456DEF", "E8 2NP", "2017-05-30")
--------------

--------------
INSERT INTO Appears VALUES ("FT123ABC", "EC1Y", "2017-05-31")
--------------

--------------
INSERT INTO Appears VALUES ("FT456DEF", "E8 2NP", "2017-05-31")
--------------

--------------
INSERT INTO Appears VALUES ("FT123ABC", "EC1Y", "2017-06-01")
--------------

--------------
INSERT INTO Appears VALUES ("FT456DEF", "EC1R 4QL", "2017-06-01")
--------------

--------------
INSERT INTO Appears VALUES ("FT123ABC", "EC1Y", "2017-06-02")
--------------

--------------
INSERT INTO Appears VALUES ("FT456DEF", "EC1R 4QL", "2017-06-02")
--------------

--------------
INSERT INTO Appears VALUES ("FT456DEF", "EC1R 4QL", "2017-06-03")
--------------

--------------
INSERT INTO Customer VALUES ("clooney@hollywood.com", "George Clooney", "1961-05-06", "8817 Lookout Mountain Ave., Los Angelos CA", 1)
--------------

--------------
INSERT INTO Customer VALUES ("rhianna@facebook.com", "Rihanna", "1988-02-20", "932 Rivas Canyon Road, Pacific Palisades CA", 2)
--------------

--------------
INSERT INTO Customer VALUES ("bling@hotline.com", "Drake", "1986-10-24", "5841 Round Meadow Rd, Hidden Hills, CA", 3)
--------------

--------------
INSERT INTO Burrito VALUES (1, 2.22, "Mini Veggie (Red Bean)", "Mini", "red", "veggie")
--------------

--------------
INSERT INTO Burrito VALUES (2, 2.22, "Mini Veggie (Black Bean)", "Mini", "black", "veggie")
--------------

--------------
INSERT INTO Burrito VALUES (3, 3.33, "Regular Veggie (Red Bean)", "Regular", "red", "veggie")
--------------

--------------
INSERT INTO Burrito VALUES (4, 3.33, "Regular Veggie (Black Bean)", "Regular", "black", "veggie")
--------------

--------------
INSERT INTO Burrito VALUES (5, 6.66, "Grande Veggie (Red Bean)", "Grande", "red", "veggie")
--------------

--------------
INSERT INTO Burrito VALUES (6, 6.66, "Grande Veggie (Black Bean)", "Grande", "black", "veggie")
--------------

--------------
INSERT INTO Burrito VALUES (7, 2.22, "Mini Clucky (Red Bean)", "Mini", "red", "chicken")
--------------

--------------
INSERT INTO Burrito VALUES (8, 2.22, "Mini Clucky (Black Bean)", "Mini", "black", "chicken")
--------------

--------------
INSERT INTO Burrito VALUES (9, 3.33, "Regular Clucky (Red Bean)", "Regular", "red", "chicken")
--------------

--------------
INSERT INTO Burrito VALUES (10, 3.33, "Regular Clucky (Black Bean)", "Regular", "black", "chicken")
--------------

--------------
INSERT INTO Burrito VALUES (11, 6.66, "Grande Clucky (Red Bean)", "Grande", "red", "chicken")
--------------

--------------
INSERT INTO Burrito VALUES (12, 6.66, "Grande Clucky (Black Bean)", "Grande", "black", "chicken")
--------------

--------------
INSERT INTO Burrito VALUES (13, 2.22, "Mini Moo (Red Bean)", "Mini", "red", "beef")
--------------

--------------
INSERT INTO Burrito VALUES (14, 2.22, "Mini Moo (Black Bean)", "Mini", "black", "beef")
--------------

--------------
INSERT INTO Burrito VALUES (15, 3.33, "Regular Moo (Red Bean)", "Regular", "red", "beef")
--------------

--------------
INSERT INTO Burrito VALUES (16, 3.33, "Regular Moo (Black Bean)", "Regular", "black", "beef")
--------------

--------------
INSERT INTO Burrito VALUES (17, 6.66, "Grande Moo (Red Bean)", "Grande", "red", "beef")
--------------

--------------
INSERT INTO Burrito VALUES (18, 6.66, "Grande Moo (Black Bean)", "Grande", "black", "beef")
--------------

--------------
INSERT INTO Topping VALUES (1, 0.00, "Lettuce")
--------------

--------------
INSERT INTO Topping VALUES (2, 0.00, "Tomato")
--------------

--------------
INSERT INTO Topping VALUES (3, 0.00, "Mild Salsa")
--------------

--------------
INSERT INTO Topping VALUES (4, 0.00, "Hot Salsa")
--------------

--------------
INSERT INTO Topping VALUES (5, 0.75, "Guacamole")
--------------

--------------
INSERT INTO Drink VALUES (1, 1.00, "Cola", 330, False)
--------------

--------------
INSERT INTO Drink VALUES (2, 2.50, "Lemonade", 500, False)
--------------

--------------
INSERT INTO Drink VALUES (3, 3.00, "Pint of Bitter", 568, True)
--------------

--------------
INSERT INTO Drink VALUES (4, 5.00, "American Beer", 473, True)
--------------

--------------
INSERT INTO FoodTruckOrder(order_no, burrito_club_no, food_truck_id, market_post_code, date_placed) 
VALUES (1, 1, "FT123ABC", "EC1Y", "2017-05-29")
--------------

--------------
INSERT INTO Contains_Burrito VALUES (1, 1, 15)
--------------

--------------
INSERT INTO Contains_Topping VALUES (1, 1, 5)
--------------

--------------
INSERT INTO Contains_Burrito VALUES (1, 2, 5)
--------------

--------------
INSERT INTO Contains_Topping VALUES (1, 2, 4)
--------------

--------------
INSERT INTO Contains_Burrito VALUES (1, 3, 17)
--------------

--------------
INSERT INTO Contains_Topping VALUES (1, 3, 2)
--------------

--------------
INSERT INTO Contains_Topping VALUES (1, 3, 3)
--------------

--------------
INSERT INTO Contains_Drink VALUES (1, 1, 1)
--------------

--------------
INSERT INTO FoodTruckOrder(order_no, burrito_club_no, food_truck_id, market_post_code, date_placed) 
VALUES (2, 1, "FT123ABC", "EC1Y", "2017-05-31")
--------------

--------------
INSERT INTO Contains_Burrito VALUES (2, 1, 2)
--------------

--------------
INSERT INTO Contains_Topping VALUES (2, 1, 5)
--------------

--------------
INSERT INTO Contains_Burrito VALUES (2, 2, 3)
--------------

--------------
INSERT INTO Contains_Topping VALUES (2, 2, 2)
--------------

--------------
INSERT INTO Contains_Topping VALUES (2, 2, 3)
--------------

--------------
INSERT INTO Contains_Topping VALUES (2, 2, 4)
--------------

--------------
INSERT INTO Contains_Topping VALUES (2, 2, 5)
--------------

--------------
INSERT INTO Contains_Burrito VALUES (2, 3, 4)
--------------

--------------
INSERT INTO Contains_Topping VALUES (2, 3, 3)
--------------

--------------
INSERT INTO Contains_Topping VALUES (2, 3, 4)
--------------

--------------
INSERT INTO Contains_Burrito VALUES (2, 4, 15)
--------------

--------------
INSERT INTO Contains_Topping VALUES (2, 4, 1)
--------------

--------------
INSERT INTO Contains_Topping VALUES (2, 4, 2)
--------------

--------------
INSERT INTO Contains_Topping VALUES (2, 4, 3)
--------------

--------------
INSERT INTO Contains_Burrito VALUES (2, 5, 2)
--------------

--------------
INSERT INTO Contains_Topping VALUES (2, 5, 1)
--------------

--------------
INSERT INTO Contains_Topping VALUES (2, 5, 2)
--------------

--------------
INSERT INTO Contains_Topping VALUES (2, 5, 3)
--------------

--------------
INSERT INTO Contains_Topping VALUES (2, 5, 4)
--------------

--------------
INSERT INTO Contains_Topping VALUES (2, 5, 5)
--------------

--------------
INSERT INTO Contains_Drink VALUES (2, 2, 2)
--------------

--------------
INSERT INTO FoodTruckOrder(order_no, burrito_club_no, food_truck_id, market_post_code, date_placed) 
VALUES (3, 1, "FT456DEF", "EC1R 4QL", "2017-06-03")
--------------

--------------
INSERT INTO Contains_Burrito VALUES (3, 1, 6)
--------------

--------------
INSERT INTO Contains_Topping VALUES (3, 1, 4)
--------------

--------------
INSERT INTO Contains_Burrito VALUES (3, 2, 3)
--------------

--------------
INSERT INTO Contains_Topping VALUES (3, 2, 2)
--------------

--------------
INSERT INTO Contains_Topping VALUES (3, 2, 3)
--------------

--------------
INSERT INTO Contains_Burrito VALUES (3, 3, 13)
--------------

--------------
INSERT INTO Contains_Topping VALUES (3, 3, 3)
--------------

--------------
INSERT INTO Contains_Topping VALUES (3, 3, 4)
--------------

--------------
INSERT INTO Contains_Topping VALUES (3, 3, 5)
--------------

--------------
INSERT INTO Contains_Drink VALUES (3, 3, 1)
--------------

--------------
INSERT INTO FoodTruckOrder(order_no, burrito_club_no, food_truck_id, market_post_code, date_placed) 
VALUES (4, 2, "FT456DEF", "E8 2NP", "2017-05-29")
--------------

--------------
INSERT INTO Contains_Burrito VALUES (4, 1, 14)
--------------

--------------
INSERT INTO Contains_Topping VALUES (4, 1, 1)
--------------

--------------
INSERT INTO Contains_Topping VALUES (4, 1, 5)
--------------

--------------
INSERT INTO Contains_Burrito VALUES (4, 2, 12)
--------------

--------------
INSERT INTO Contains_Topping VALUES (4, 2, 1)
--------------

--------------
INSERT INTO Contains_Topping VALUES (4, 2, 2)
--------------

--------------
INSERT INTO Contains_Topping VALUES (4, 2, 3)
--------------

--------------
INSERT INTO Contains_Topping VALUES (4, 2, 4)
--------------

--------------
INSERT INTO Contains_Drink VALUES (4, 4, 2)
--------------

--------------
INSERT INTO Contains_Drink VALUES (4, 3, 1)
--------------

--------------
INSERT INTO FoodTruckOrder(order_no, burrito_club_no, food_truck_id, market_post_code, date_placed) 
VALUES (5, 2, "FT456DEF", "EC1R 4QL", "2017-06-01")
--------------

--------------
INSERT INTO Contains_Burrito VALUES (5, 1, 11)
--------------

--------------
INSERT INTO Contains_Topping VALUES (5, 1, 1)
--------------

--------------
INSERT INTO Contains_Topping VALUES (5, 1, 2)
--------------

--------------
INSERT INTO Contains_Topping VALUES (5, 1, 3)
--------------

--------------
INSERT INTO FoodTruckOrder(order_no, burrito_club_no, food_truck_id, market_post_code, date_placed) 
VALUES (6, 2, "FT456DEF", "EC1R 4QL", "2017-06-02")
--------------

--------------
INSERT INTO Contains_Burrito VALUES (6, 1, 7)
--------------

--------------
INSERT INTO Contains_Burrito VALUES (6, 2, 1)
--------------

--------------
INSERT INTO Contains_Topping VALUES (6, 2, 3)
--------------

--------------
INSERT INTO Contains_Drink VALUES (6, 1, 1)
--------------

--------------
INSERT INTO FoodTruckOrder(order_no, burrito_club_no, food_truck_id, market_post_code, date_placed) 
VALUES (7, 3, "FT123ABC", "EC1Y", "2017-05-31")
--------------

--------------
INSERT INTO Contains_Burrito VALUES (7, 1, 9)
--------------

--------------
INSERT INTO Contains_Topping VALUES (7, 1, 2)
--------------

--------------
INSERT INTO Contains_Topping VALUES (7, 1, 5)
--------------

--------------
INSERT INTO Contains_Drink VALUES (7, 2, 1)
--------------

--------------
INSERT INTO FoodTruckOrder(order_no, burrito_club_no, food_truck_id, market_post_code, date_placed) 
VALUES (8, 3, "FT123ABC", "EC1Y", "2017-06-02")
--------------

--------------
INSERT INTO Contains_Burrito VALUES (8, 1, 10)
--------------

--------------
INSERT INTO Contains_Topping VALUES (8, 1, 1)
--------------

--------------
INSERT INTO Contains_Topping VALUES (8, 1, 2)
--------------

--------------
INSERT INTO Contains_Topping VALUES (8, 1, 3)
--------------

--------------
INSERT INTO Contains_Topping VALUES (8, 1, 4)
--------------

--------------
INSERT INTO Contains_Topping VALUES (8, 1, 5)
--------------

--------------
INSERT INTO FoodTruckOrder(order_no, burrito_club_no, food_truck_id, market_post_code, date_placed) 
VALUES (9, 3, "FT456DEF", "EC1R 4QL", "2017-06-03")
--------------

--------------
INSERT INTO Contains_Burrito VALUES (9, 1, 8)
--------------

--------------
INSERT INTO Contains_Topping VALUES (9, 1, 2)
--------------

--------------
INSERT INTO Contains_Topping VALUES (9, 1, 3)
--------------

--------------
INSERT INTO Contains_Topping VALUES (9, 1, 5)
--------------

--------------
INSERT INTO Contains_Drink VALUES (9, 1, 1)
--------------

--------------
INSERT INTO FoodTruckOrder(order_no, burrito_club_no, food_truck_id, market_post_code, date_placed) 
VALUES (10, NULL, "FT123ABC", "EC1Y", "2017-05-29")
--------------

--------------
INSERT INTO Contains_Burrito VALUES (10, 1, 16)
--------------

--------------
INSERT INTO Contains_Topping VALUES (10, 1, 4)
--------------

--------------
INSERT INTO Contains_Topping VALUES (10, 1, 5)
--------------

--------------
INSERT INTO FoodTruckOrder(order_no, burrito_club_no, food_truck_id, market_post_code, date_placed) 
VALUES (11, NULL, "FT456DEF", "E8 2NP", "2017-05-31")
--------------

--------------
INSERT INTO Contains_Burrito VALUES (11, 1, 17)
--------------

--------------
INSERT INTO Contains_Topping VALUES (11, 1, 1)
--------------

--------------
INSERT INTO Contains_Topping VALUES (11, 1, 3)
--------------

--------------
INSERT INTO Contains_Topping VALUES (11, 1, 4)
--------------

--------------
INSERT INTO Contains_Topping VALUES (11, 1, 5)
--------------

--------------
INSERT INTO Contains_Drink VALUES (11, 4, 1)
--------------

--------------
INSERT INTO FoodTruckOrder(order_no, burrito_club_no, food_truck_id, market_post_code, date_placed) 
VALUES (12, NULL, "FT456DEF", "EC1R 4QL", "2017-06-02")
--------------

--------------
INSERT INTO Contains_Burrito VALUES (12, 1, 18)
--------------

--------------
INSERT INTO Contains_Topping VALUES (12, 1, 1)
--------------

--------------
INSERT INTO Contains_Topping VALUES (12, 1, 2)
--------------

--------------
INSERT INTO Contains_Burrito VALUES (12, 2, 1)
--------------

--------------
INSERT INTO Contains_Topping VALUES (12, 2, 1)
--------------

--------------
INSERT INTO Contains_Topping VALUES (12, 2, 3)
--------------

--------------
INSERT INTO Contains_Topping VALUES (12, 2, 5)
--------------

--------------
INSERT INTO Contains_Drink VALUES (12, 2, 2)
--------------

--------------
UPDATE FoodTruckOrder, 
(SELECT order_no, SUM(price) as total_cost
 FROM ( (SELECT order_no, price
         FROM Contains_Burrito NATURAL JOIN Burrito
         WHERE NOT(order_no = 3 AND burrito_no = 3)) 
        UNION
        (SELECT order_no, price
         FROM Contains_Topping NATURAL JOIN Topping 
         WHERE NOT(order_no = 3 AND burrito_no = 3)) 
        UNION
        (SELECT order_no, (price * quantity) as price
         FROM Contains_Drink NATURAL JOIN Drink) ) as A
 GROUP BY order_no) as T
SET FoodTruckOrder.total_cost = T.total_cost
WHERE FoodTruckOrder.order_no = T.order_no
--------------


---
###


################################################################################
###
## select.sql
#
select.sql exists: True
--------------------------------------------------------------------------------
-- Part 2.3 select.sql
--
-- Submitted by: Coursework Solution
-- 
-- add your SELECT statements here for each section

-- 1. Total Sales (for May 2017)

SELECT SUM(total_cost) AS total_sales
FROM FoodTruckOrder 
WHERE date_placed >= "2017-05-01" 
 AND date_placed < "2017-05-31";

-- Result should be returned as a SCALAR 
--  (single row and single column)
-- +-------------+
-- | total_sales |
-- +-------------+
-- |       38.45 |
-- +-------------+

-- 2. Burrito Report 

-- Using a LEFT JOIN to join ALL of the burrios and June 2017 orders
-- Grouping by Filling Type and Size (aggregating Bean Type)
-- Summing quantity.
SELECT filling, size, sum(quantity) as quantity
FROM ( SELECT filling, size, IF(quantity IS NULL, 0, quantity) as quantity
       FROM Burrito LEFT JOIN (
          SELECT burrito_id, COUNT(*) AS quantity  
          FROM FoodTruckOrder NATURAL JOIN Contains_Burrito 
          WHERE date_placed >= "2017-06-01" 
            AND date_placed <  "2017-07-01" 
          GROUP BY burrito_id
       ) AS B ON (Burrito.burrito_id = B.burrito_id) ) as A
GROUP BY filling, size;

-- +---------+---------+----------+
-- | filling | size    | quantity |
-- +---------+---------+----------+
-- | beef    | Grande  |        1 |
-- | beef    | Mini    |        1 |
-- | beef    | Regular |        0 |
-- | chicken | Grande  |        1 |
-- | chicken | Mini    |        2 |
-- | chicken | Regular |        1 |
-- | veggie  | Grande  |        1 |
-- | veggie  | Mini    |        2 |
-- | veggie  | Regular |        1 |
-- +---------+---------+----------+


-- 3. Top Customers

-- interpret "total purchases" a frequency of orders
SELECT name, email, COUNT(*) AS purchases
FROM Customer NATURAL JOIN FoodTruckOrder 
GROUP BY burrito_club_no
ORDER BY purchases DESC;

-- +----------------+-----------------------+-----------+
-- | name           | email                 | purchases |
-- +----------------+-----------------------+-----------+
-- | George Clooney | clooney@hollywood.com |         3 |
-- | Rihanna        | rhianna@facebook.com  |         3 |
-- | Drake          | bling@hotline.com     |         3 |
-- +----------------+-----------------------+-----------+

-- or, if interpret sorting by sum of purchases
SELECT name, email, SUM(total_cost) AS purchases
FROM Customer NATURAL JOIN FoodTruckOrder 
GROUP BY burrito_club_no
ORDER BY purchases DESC;

-- +----------------+-----------------------+-----------+
-- | name           | email                 | purchases |
-- +----------------+-----------------------+-----------+
-- | George Clooney | clooney@hollywood.com |     36.03 |
-- | Rihanna        | rhianna@facebook.com  |     32.51 |
-- | Drake          | bling@hotline.com     |     14.63 |
-- +----------------+-----------------------+-----------+


-- 4. Guacamole Receipt

-- Choose an order number that includes Gucamole (topping_id = 5) and a drink

SELECT * FROM (SELECT order_no FROM Contains_Topping where topping_id = 5) as T 
 NATURAL JOIN (SELECT order_no FROM Contains_Drink) as D;

-- Most of the Orders fit this criteria:
-- +----------+
-- | order_no |
-- +----------+
-- |        1 |
-- |        9 |
-- |        2 |
-- |        2 |
-- |        2 |
-- |        7 |
-- |       12 |
-- |        3 |
-- |        4 |
-- |        4 |
-- |       11 |
-- +----------+

-- using order_no: 1
(SELECT description, price
 FROM (
   ( 
      SELECT burrito_no, price, CONCAT("Burrito ", burrito_no, ": ", description, " with ", filling, " filling") as description
      FROM Burrito NATURAL JOIN Contains_Burrito 
      WHERE order_no = 1
   ) UNION (
      SELECT burrito_no, price, CONCAT("      with ", description, " topping") as description
      FROM Topping NATURAL JOIN Contains_Topping 
      WHERE order_no = 1
   ) 
 ) as B
 ORDER BY burrito_no, description DESC
) UNION (
    SELECT CONCAT("Drink: ", description, " (", size_ml, "ml) x ", quantity), (price * quantity) AS price 
    FROM Drink NATURAL JOIN Contains_Drink
    WHERE order_no = 1
);

-- +---------------------------------------------------------+-------+
-- | description                                             | price |
-- +---------------------------------------------------------+-------+
-- | Burrito 2: Grande Veggie (Red Bean) with veggie filling |  6.66 |
-- | Burrito 1: Regular Moo (Red Bean) with beef filling     |  3.33 |
-- | Burrito 3: Grande Moo (Red Bean) with beef filling      |  6.66 |
-- |       with Tomato topping                               |  0.00 |
-- |       with Mild Salsa topping                           |  0.00 |
-- |       with Hot Salsa topping                            |  0.00 |
-- |       with Guacamole topping                            |  0.75 |
-- | Drink: Cola (330ml) x 1                                 |  1.00 |
-- +---------------------------------------------------------+-------+

-- 5. Alchohol free!

-- Designate Whitecross Street Market ("EC1Y") as Alchohol free:



-- Note: MySQL does not support ASSERTIONS
-- CREATE ASSERTION CHECK ( ...
SELECT NOT EXISTS (
  SELECT * 
  FROM (FoodTruckOrder NATURAL JOIN 
        Contains_Drink) NATURAL JOIN Drink
  WHERE Drink.alcoholic = True 
   AND FoodTruckOrder.market_post_code = "EC1Y"
) AS Alchohol_free;

-- Should be True (1)
-- +---------------+
-- | Alchohol_free |
-- +---------------+
-- |             1 |
-- +---------------+

-- Place a Nutty Order - an anonymous person buys an American Beer

INSERT INTO FoodTruckOrder(order_no, burrito_club_no, food_truck_id, market_post_code, date_placed) 
VALUES (13, NULL, "FT123ABC", "EC1Y", "2017-05-29");
-- An American Beer
INSERT INTO Contains_Drink VALUES (13, 4, 1);


-- Test (same query as before)
-- SELECT NOT EXISTS (
SELECT NOT EXISTS (
  SELECT * 
  FROM (FoodTruckOrder NATURAL JOIN 
        Contains_Drink) NATURAL JOIN Drink
  WHERE Drink.alcoholic = True 
   AND FoodTruckOrder.market_post_code = "EC1Y"
) AS Alchohol_free;

-- Should be False (0)
-- +---------------+
-- | Alchohol_free |
-- +---------------+
-- |             0 |
-- +---------------+
--------------------------------------------------------------------------------

RUNNING select.sql
---
Warning: Using a password on the command line interface can be insecure.
--------------
SELECT SUM(total_cost) AS total_sales
FROM FoodTruckOrder 
WHERE date_placed >= "2017-05-01" 
 AND date_placed < "2017-05-31"
--------------

total_sales
38.45
--------------
SELECT filling, size, sum(quantity) as quantity
FROM ( SELECT filling, size, IF(quantity IS NULL, 0, quantity) as quantity
       FROM Burrito LEFT JOIN (
          SELECT burrito_id, COUNT(*) AS quantity  
          FROM FoodTruckOrder NATURAL JOIN Contains_Burrito 
          WHERE date_placed >= "2017-06-01" 
            AND date_placed <  "2017-07-01" 
          GROUP BY burrito_id
       ) AS B ON (Burrito.burrito_id = B.burrito_id) ) as A
GROUP BY filling, size
--------------

filling	size	quantity
beef	Grande	1
beef	Mini	1
beef	Regular	0
chicken	Grande	1
chicken	Mini	2
chicken	Regular	1
veggie	Grande	1
veggie	Mini	2
veggie	Regular	1
--------------
SELECT name, email, COUNT(*) AS purchases
FROM Customer NATURAL JOIN FoodTruckOrder 
GROUP BY burrito_club_no
ORDER BY purchases DESC
--------------

name	email	purchases
Drake	bling@hotline.com	3
George Clooney	clooney@hollywood.com	3
Rihanna	rhianna@facebook.com	3
--------------
SELECT name, email, SUM(total_cost) AS purchases
FROM Customer NATURAL JOIN FoodTruckOrder 
GROUP BY burrito_club_no
ORDER BY purchases DESC
--------------

name	email	purchases
George Clooney	clooney@hollywood.com	36.03
Rihanna	rhianna@facebook.com	32.51
Drake	bling@hotline.com	14.63
--------------
SELECT * FROM (SELECT order_no FROM Contains_Topping where topping_id = 5) as T 
 NATURAL JOIN (SELECT order_no FROM Contains_Drink) as D
--------------

order_no
1
9
2
2
2
7
12
3
4
4
11
--------------
(SELECT description, price
 FROM (
   ( 
      SELECT burrito_no, price, CONCAT("Burrito ", burrito_no, ": ", description, " with ", filling, " filling") as description
      FROM Burrito NATURAL JOIN Contains_Burrito 
      WHERE order_no = 1
   ) UNION (
      SELECT burrito_no, price, CONCAT("      with ", description, " topping") as description
      FROM Topping NATURAL JOIN Contains_Topping 
      WHERE order_no = 1
   ) 
 ) as B
 ORDER BY burrito_no, description DESC
) UNION (
    SELECT CONCAT("Drink: ", description, " (", size_ml, "ml) x ", quantity), (price * quantity) AS price 
    FROM Drink NATURAL JOIN Contains_Drink
    WHERE order_no = 1
)
--------------

description	price
Burrito 2: Grande Veggie (Red Bean) with veggie filling	6.66
Burrito 1: Regular Moo (Red Bean) with beef filling	3.33
Burrito 3: Grande Moo (Red Bean) with beef filling	6.66
      with Tomato topping	0.00
      with Mild Salsa topping	0.00
      with Hot Salsa topping	0.00
      with Guacamole topping	0.75
Drink: Cola (330ml) x 1	1.00
--------------
SELECT NOT EXISTS (
  SELECT * 
  FROM (FoodTruckOrder NATURAL JOIN 
        Contains_Drink) NATURAL JOIN Drink
  WHERE Drink.alcoholic = True 
   AND FoodTruckOrder.market_post_code = "EC1Y"
) AS Alchohol_free
--------------

Alchohol_free
1
--------------
INSERT INTO FoodTruckOrder(order_no, burrito_club_no, food_truck_id, market_post_code, date_placed) 
VALUES (13, NULL, "FT123ABC", "EC1Y", "2017-05-29")
--------------

--------------
INSERT INTO Contains_Drink VALUES (13, 4, 1)
--------------

--------------
SELECT NOT EXISTS (
  SELECT * 
  FROM (FoodTruckOrder NATURAL JOIN 
        Contains_Drink) NATURAL JOIN Drink
  WHERE Drink.alcoholic = True 
   AND FoodTruckOrder.market_post_code = "EC1Y"
) AS Alchohol_free
--------------

Alchohol_free
0

---
###


################################################################################
###
## update.sql
#
update.sql exists: True
--------------------------------------------------------------------------------
-- Part 2.4 update.sql
--
-- Submitted by: Coursework Solution
-- 
-- add your INSERT/UPDATE statements here


-- Identify who placed the most recent order according to date_placed
-- and order no ...
SELECT burrito_club_no 
FROM FoodTruckOrder 
WHERE burrito_club_no IS NOT NULL 
ORDER BY date_placed DESC, order_no DESC;

-- +-----------------+
-- | burrito_club_no |
-- +-----------------+
-- |               3 |
-- |               1 |
-- |               3 |
-- |               2 |
-- |               2 |
-- |               3 |
-- |               1 |
-- |               2 |
-- |               1 |
-- +-----------------+


-- Using burrito_club_no = 3 as customer

SELECT burrito_club_no, COUNT(*) AS Number_of_Burritos
FROM Contains_Burrito NATURAL JOIN FoodTruckOrder 
WHERE burrito_club_no = 3;

-- +-----------------+--------------------+
-- | burrito_club_no | Number_of_Burritos |
-- +-----------------+--------------------+
-- |               3 |                  3 |
-- +-----------------+--------------------+

-- Part 1. Add enough burritos to go over 10 burritos:
-- (Create an Order Number 14 for 8 burritos (7 paid, and 1 free))
INSERT INTO FoodTruckOrder(order_no, burrito_club_no, food_truck_id, market_post_code, date_placed) 
VALUES (14, 3, "FT456DEF", "EC1R 4QL", "2017-06-03");
-- Burrito 1 
INSERT INTO Contains_Burrito VALUES (14, 1, 1);
INSERT INTO Contains_Topping VALUES (14, 1, 1);
INSERT INTO Contains_Topping VALUES (14, 1, 2);
INSERT INTO Contains_Topping VALUES (14, 1, 3);
-- Burrito 2
INSERT INTO Contains_Burrito VALUES (14, 2, 2);
-- Burrito 3 
INSERT INTO Contains_Burrito VALUES (14, 3, 3);
INSERT INTO Contains_Topping VALUES (14, 3, 2);
-- Burrito 4 
INSERT INTO Contains_Burrito VALUES (14, 4, 4);
INSERT INTO Contains_Topping VALUES (14, 4, 5);
-- Burrito 5 
INSERT INTO Contains_Burrito VALUES (14, 5, 5);
INSERT INTO Contains_Topping VALUES (14, 5, 1);
INSERT INTO Contains_Topping VALUES (14, 5, 5);
-- Burrito 6 
INSERT INTO Contains_Burrito VALUES (14, 6, 6);
INSERT INTO Contains_Topping VALUES (14, 6, 2);
-- Burrito 7 
INSERT INTO Contains_Burrito VALUES (14, 7, 7);
INSERT INTO Contains_Topping VALUES (14, 7, 3);
-- Burrito 8 (FREE) 
INSERT INTO Contains_Burrito VALUES (14, 8, 14);
INSERT INTO Contains_Topping VALUES (14, 8, 1);
INSERT INTO Contains_Topping VALUES (14, 8, 2);
INSERT INTO Contains_Topping VALUES (14, 8, 3);
INSERT INTO Contains_Topping VALUES (14, 8, 4);
INSERT INTO Contains_Topping VALUES (14, 8, 5);


-- Part 2. Update the Number of Burritos

-- This is unnecessary, because it is a derived attribute
-- and the Number of Burritos is retrieval via the "BurritoClub" VIEW

SELECT * FROM BurritoClub WHERE burrito_club_no = 3;

-- +-----------------+------------------+
-- | burrito_club_no | NumberOfBurritos |
-- +-----------------+------------------+
-- |               3 |               11 |
-- +-----------------+------------------+


-- Part 3. Calculate the final order price for Order 14
-- (Taking into account the free burrito)

SELECT order_no, SUM(price) as total_cost
FROM ( (SELECT order_no, price
         FROM Contains_Burrito NATURAL JOIN Burrito
         WHERE order_no = 14 AND burrito_no != 8) -- omits the 1 FREE BURRITO
        UNION
        (SELECT order_no, price
         FROM Contains_Topping NATURAL JOIN Topping 
         WHERE order_no = 14 AND burrito_no != 8) -- omits the 1 FREE BURRITO
        UNION
        (SELECT order_no, (price * quantity) as price
         FROM Contains_Drink NATURAL JOIN Drink) ) as A;

-- +----------+------------+
-- | order_no | total_cost |
-- +----------+------------+
-- |       14 |      54.46 |
-- +----------+------------+

-- Part 4. Update Order 14 with the final total_cost

UPDATE FoodTruckOrder
SET FoodTruckOrder.total_cost = (SELECT SUM(price) as total_cost
                                 FROM ( (SELECT order_no, price
                                         FROM Contains_Burrito NATURAL JOIN Burrito
                                         WHERE order_no = 14 AND burrito_no != 8) -- omits the 1 FREE BURRITO
                                        UNION
                                        (SELECT order_no, price
                                         FROM Contains_Topping NATURAL JOIN Topping 
                                         WHERE order_no = 14 AND burrito_no != 8) -- omits the 1 FREE BURRITO
                                        UNION
                                        (SELECT order_no, (price * quantity) as price
                                         FROM Contains_Drink NATURAL JOIN Drink) ) as A)
WHERE FoodTruckOrder.order_no = 14;


-- Updated FoodTruckOrder
-- +----------+-------------+-----------------+---------------+------------------+------------+
-- | order_no | date_placed | burrito_club_no | food_truck_id | market_post_code | total_cost |
-- +----------+-------------+-----------------+---------------+------------------+------------+
-- |       14 | 2017-06-03  |               3 | FT456DEF      | EC1R 4QL         |      54.46 |
-- +----------+-------------+-----------------+---------------+------------------+------------+
--------------------------------------------------------------------------------

RUNNING update.sql
---
Warning: Using a password on the command line interface can be insecure.
--------------
SELECT burrito_club_no 
FROM FoodTruckOrder 
WHERE burrito_club_no IS NOT NULL 
ORDER BY date_placed DESC, order_no DESC
--------------

burrito_club_no
3
1
3
2
2
3
1
2
1
--------------
SELECT burrito_club_no, COUNT(*) AS Number_of_Burritos
FROM Contains_Burrito NATURAL JOIN FoodTruckOrder 
WHERE burrito_club_no = 3
--------------

burrito_club_no	Number_of_Burritos
3	3
--------------
INSERT INTO FoodTruckOrder(order_no, burrito_club_no, food_truck_id, market_post_code, date_placed) 
VALUES (14, 3, "FT456DEF", "EC1R 4QL", "2017-06-03")
--------------

--------------
INSERT INTO Contains_Burrito VALUES (14, 1, 1)
--------------

--------------
INSERT INTO Contains_Topping VALUES (14, 1, 1)
--------------

--------------
INSERT INTO Contains_Topping VALUES (14, 1, 2)
--------------

--------------
INSERT INTO Contains_Topping VALUES (14, 1, 3)
--------------

--------------
INSERT INTO Contains_Burrito VALUES (14, 2, 2)
--------------

--------------
INSERT INTO Contains_Burrito VALUES (14, 3, 3)
--------------

--------------
INSERT INTO Contains_Topping VALUES (14, 3, 2)
--------------

--------------
INSERT INTO Contains_Burrito VALUES (14, 4, 4)
--------------

--------------
INSERT INTO Contains_Topping VALUES (14, 4, 5)
--------------

--------------
INSERT INTO Contains_Burrito VALUES (14, 5, 5)
--------------

--------------
INSERT INTO Contains_Topping VALUES (14, 5, 1)
--------------

--------------
INSERT INTO Contains_Topping VALUES (14, 5, 5)
--------------

--------------
INSERT INTO Contains_Burrito VALUES (14, 6, 6)
--------------

--------------
INSERT INTO Contains_Topping VALUES (14, 6, 2)
--------------

--------------
INSERT INTO Contains_Burrito VALUES (14, 7, 7)
--------------

--------------
INSERT INTO Contains_Topping VALUES (14, 7, 3)
--------------

--------------
INSERT INTO Contains_Burrito VALUES (14, 8, 14)
--------------

--------------
INSERT INTO Contains_Topping VALUES (14, 8, 1)
--------------

--------------
INSERT INTO Contains_Topping VALUES (14, 8, 2)
--------------

--------------
INSERT INTO Contains_Topping VALUES (14, 8, 3)
--------------

--------------
INSERT INTO Contains_Topping VALUES (14, 8, 4)
--------------

--------------
INSERT INTO Contains_Topping VALUES (14, 8, 5)
--------------

--------------
SELECT * FROM BurritoClub WHERE burrito_club_no = 3
--------------

burrito_club_no	NumberOfBurritos
3	11
--------------
SELECT order_no, SUM(price) as total_cost
FROM ( (SELECT order_no, price
         FROM Contains_Burrito NATURAL JOIN Burrito
         WHERE order_no = 14 AND burrito_no != 8) 
        UNION
        (SELECT order_no, price
         FROM Contains_Topping NATURAL JOIN Topping 
         WHERE order_no = 14 AND burrito_no != 8) 
        UNION
        (SELECT order_no, (price * quantity) as price
         FROM Contains_Drink NATURAL JOIN Drink) ) as A
--------------

order_no	total_cost
14	54.46
--------------
UPDATE FoodTruckOrder
SET FoodTruckOrder.total_cost = (SELECT SUM(price) as total_cost
                                 FROM ( (SELECT order_no, price
                                         FROM Contains_Burrito NATURAL JOIN Burrito
                                         WHERE order_no = 14 AND burrito_no != 8) 
                                        UNION
                                        (SELECT order_no, price
                                         FROM Contains_Topping NATURAL JOIN Topping 
                                         WHERE order_no = 14 AND burrito_no != 8) 
                                        UNION
                                        (SELECT order_no, (price * quantity) as price
                                         FROM Contains_Drink NATURAL JOIN Drink) ) as A)
WHERE FoodTruckOrder.order_no = 14
--------------


---
###


################################################################################
###
## delete.sql
#
delete.sql exists: True
--------------------------------------------------------------------------------
-- Part 2.5 delete.sql
--
-- Submitted by: Coursework Solution
-- 
-- add your DELETE statements here

-- Top Selling Customer is George Clooney,
-- need to Clean up DB from "clooney@hollywood.com":

-- Contains_Drink
DELETE FROM Contains_Drink
WHERE Contains_Drink.order_no IN (
	-- Orders for "clooney@hollywood.com"
	SELECT order_no 
	FROM FoodTruckOrder
	WHERE FoodTruckOrder.burrito_club_no = (SELECT burrito_club_no 
	                   	                    FROM Customer 
	                   	                    WHERE email="clooney@hollywood.com")
);

-- Contains_Topping
DELETE FROM Contains_Topping
WHERE Contains_Topping.order_no IN (
	-- Orders for "clooney@hollywood.com"
	SELECT order_no 
	FROM FoodTruckOrder
	WHERE FoodTruckOrder.burrito_club_no = (SELECT burrito_club_no 
	                   	                    FROM Customer 
	                   	                    WHERE email="clooney@hollywood.com")
);

-- Contains_Burrito
DELETE FROM Contains_Burrito
WHERE Contains_Burrito.order_no IN (
	-- Orders for "clooney@hollywood.com"
	SELECT order_no 
	FROM FoodTruckOrder
	WHERE FoodTruckOrder.burrito_club_no = (SELECT burrito_club_no 
	                   	                    FROM Customer 
	                   	                    WHERE email="clooney@hollywood.com")
);


--   FoodTruckOrder
DELETE FROM FoodTruckOrder
WHERE FoodTruckOrder.burrito_club_no = (SELECT burrito_club_no 
	                   	                FROM Customer 
	                   	                WHERE email="clooney@hollywood.com");

--  Customer 
-- (If FOREIGN KEYs have ON DELETE CASCADE correctly
--  then only requires the statement below)
DELETE FROM Customer WHERE email="clooney@hollywood.com";

--------------------------------------------------------------------------------

RUNNING delete.sql
---
Warning: Using a password on the command line interface can be insecure.
--------------
DELETE FROM Contains_Drink
WHERE Contains_Drink.order_no IN (
	
	SELECT order_no 
	FROM FoodTruckOrder
	WHERE FoodTruckOrder.burrito_club_no = (SELECT burrito_club_no 
	                   	                    FROM Customer 
	                   	                    WHERE email="clooney@hollywood.com")
)
--------------

--------------
DELETE FROM Contains_Topping
WHERE Contains_Topping.order_no IN (
	
	SELECT order_no 
	FROM FoodTruckOrder
	WHERE FoodTruckOrder.burrito_club_no = (SELECT burrito_club_no 
	                   	                    FROM Customer 
	                   	                    WHERE email="clooney@hollywood.com")
)
--------------

--------------
DELETE FROM Contains_Burrito
WHERE Contains_Burrito.order_no IN (
	
	SELECT order_no 
	FROM FoodTruckOrder
	WHERE FoodTruckOrder.burrito_club_no = (SELECT burrito_club_no 
	                   	                    FROM Customer 
	                   	                    WHERE email="clooney@hollywood.com")
)
--------------

--------------
DELETE FROM FoodTruckOrder
WHERE FoodTruckOrder.burrito_club_no = (SELECT burrito_club_no 
	                   	                FROM Customer 
	                   	                WHERE email="clooney@hollywood.com")
--------------

--------------
DELETE FROM Customer WHERE email="clooney@hollywood.com"
--------------


---
###


